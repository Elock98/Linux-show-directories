#!/usr/bin/python3

import os
import sys
from subprocess import check_output, Popen, PIPE
from termcolor import colored
from optparse import OptionParser

def format_dirs(dirs:str) -> list:
    """
        Turns raw data from the 'ls' command
        into a list of files and directories.
    """
    dirs = dirs.split("\\n")
    dirs[0] = dirs[0][2:]
    dirs = dirs[:-1]

    return dirs

def get_local(path:str, indent:int) -> None:
    """
        Discovers and prints the file tree.
    """
    local_dirs = []
    try:
        if os.path.isdir(path):
            os.chdir(path)
            dirs = format_dirs(str(check_output(["ls", path])))
        else:
            return
    except Exception as e:
        sys.exit("Exception during get_local" + e)

    for dir in dirs:
        os.chdir(path)
        if os.path.isfile(dir):
            print_file(dir, indent)
        elif os.path.isdir(dir):
            local_dirs.append(dir)

    for dir in local_dirs:
        print_folder(dir, indent)
        get_local(path + "/" + dir, indent+1)

def print_file(file:str, indent) -> None:
    """
        Prints file to the screen in tree
        structured formatting.
    """
    if indent > 0:
        print("|    "*(indent-1) + "|    |---> " + colored(file, "green"))
    else:
        print("|    "*(indent-1) + "|---> " + colored(file, "green"))


def print_folder(folder:str, indent) -> None:
    """
        Prints folder to the screen in tree
        structured formatting.
    """
    print("|    "*indent + "|")
    print("|    "*indent + "|\\____" + colored(folder, "cyan"))


def setup_parser() -> OptionParser:
    """
        Creates, sets-up and returns an
        OptionParser object.
    """
    parser = OptionParser(usage="%prog <start dir>",
                          version="1.0.0",
                          description= """Displays the files and folders located under <start dir>,
                                          if no start dir is specified the working directory will be used.
                                       """
                         )

    return parser


def main() -> None:

    parser = setup_parser()

    (opts, args) = parser.parse_args()

    if len(args) > 1:
        parser.print_help()
        sys.exit(1)
    elif len(args) == 1:
        start_dir = args[0]
    else:
        start_dir = os.getcwd()

    if start_dir.endswith("/") and len(start_dir) > 1:
        start_dir = start_dir[:-1]

    if not os.path.isdir(start_dir):
        print(colored(f"{start_dir} is not a correct path", "red"))
        parser.print_help()
        sys.exit(1)

    print(colored(start_dir + "/", "cyan"))

    get_local(start_dir, 0)


if __name__ == "__main__":
    main()
